# Add mrustc slice length intrinsics
--- src/libcore/intrinsics.rs
+++ src/libcore/intrinsics.rs
@@ -678,5 +678,9 @@
     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;
 
+    /// Obtain the length of a slice pointer
+    #[cfg(rust_compiler="mrustc")]
+    pub fn mrustc_slice_len<T>(pointer: *const [T]) -> usize;
+
     /// Gets a static string slice containing the name of a type.
     pub fn type_name<T: ?Sized>() -> &'static str;

--- src/libcore/slice/mod.rs
+++ src/libcore/slice/mod.rs
@@ -413,5 +413,7 @@
     pub const fn len(&self) -> usize {
-        unsafe {
-            Repr { rust: self }.raw.len
-        }
+        #[cfg(not(rust_compiler="mrustc"))]
+        let rv = unsafe { Repr { rust: self }.raw.len };
+        #[cfg(rust_compiler="mrustc")]
+        let rv = unsafe { ::intrinsics::mrustc_slice_len(self) };
+        rv
     }
# Static-link rustc_codegen_llvm because mrustc doesn't have dylib support
--- src/librustc_driver/Cargo.toml
+++ src/librustc_driver/Cargo.toml
@@ -39,1 +39,2 @@
 syntax_pos = { path = "../libsyntax_pos" }
+rustc_codegen_llvm = { path = "../librustc_codegen_llvm" }
--- src/librustc_driver/lib.rs
+++ src/librustc_driver/lib.rs
@@ -63,2 +63,3 @@
 extern crate syntax_pos;
+extern crate rustc_codegen_llvm;
 
@@ -259,2 +260,3 @@
         let backend = match &codegen_name[..] {
+            "llvm" => rustc_codegen_llvm::__rustc_codegen_backend,
             "metadata_only" => {
# No workspace support in minicargo, patch cargo's Cargo.toml
--- src/tools/cargo/Cargo.toml
+++ src/tools/cargo/Cargo.toml
@@ -60,5 +60,5 @@
 # A noop dependency that changes in the Rust repository, it's a bit of a hack.
 # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`
 # for more information.
-rustc-workspace-hack = "1.0.0"
+rustc-workspace-hack = { path = "../rustc-workspace-hack" }
 
# mrustc can't represent a 24 byte version of this enum (no way of storing the
# tag in padding)
--- src/librustc/ty/context.rs
+++ src/librustc/ty/context.rs
@@ -805,5 +805,5 @@
         // Ensure our type representation does not grow
-        #[cfg(target_pointer_width = "64")]
-        assert!(mem::size_of::<ty::TypeVariants>() <= 24);
-        #[cfg(target_pointer_width = "64")]
-        assert!(mem::size_of::<ty::TyS>() <= 32);
+        //#[cfg(target_pointer_width = "64")]
+        //assert!(mem::size_of::<ty::TypeVariants>() <= 24);
+        //#[cfg(target_pointer_width = "64")]
+        //assert!(mem::size_of::<ty::TyS>() <= 32);
